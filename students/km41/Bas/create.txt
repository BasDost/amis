
--
-- Create model ContentType
--
CREATE TABLE "DJANGO_CONTENT_TYPE" ("ID" NUMBER(11) NOT NULL PRIMARY KEY, "NAME" NVARCHAR2(100) NULL, "APP_LABEL" NVARCHAR2(100) NULL, "MODEL" NVARCHAR2(100) NULL);
--
-- Alter unique_together for contenttype (1 constraint(s))
--
ALTER TABLE "DJANGO_CONTENT_TYPE" ADD CONSTRAINT "DJANGO_CO_APP_LABEL_76BD3D3B_U" UNIQUE ("APP_LABEL", "MODEL");

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(1) INTO i FROM USER_SEQUENCES
        WHERE SEQUENCE_NAME = 'DJANGO_CONTENT_TYPE_SQ';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "DJANGO_CONTENT_TYPE_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "DJANGO_CONTENT_TYPE_TR"
BEFORE INSERT ON "DJANGO_CONTENT_TYPE"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "DJANGO_CONTENT_TYPE_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/
COMMIT;


--
-- Create model Permission
--
CREATE TABLE "AUTH_PERMISSION" ("ID" NUMBER(11) NOT NULL PRIMARY KEY, "NAME" NVARCHAR2(50) NULL, "CONTENT_TYPE_ID" NUMBER(11) NOT NULL, "CODENAME" NVARCHAR2(100) NULL);
--
-- Create model Group
--
CREATE TABLE "AUTH_GROUP" ("ID" NUMBER(11) NOT NULL PRIMARY KEY, "NAME" NVARCHAR2(80) NULL UNIQUE);
CREATE TABLE "AUTH_GROUP_PERMISSIONS" ("ID" NUMBER(11) NOT NULL PRIMARY KEY, "GROUP_ID" NUMBER(11) NOT NULL, "PERMISSION_ID" NUMBER(11) NOT NULL);
--
-- Create model User
--
CREATE TABLE "AUTH_USER" ("ID" NUMBER(11) NOT NULL PRIMARY KEY, "PASSWORD" NVARCHAR2(128) NULL, "LAST_LOGIN" TIMESTAMP NOT NULL, "IS_SUPERUSER" NUMBER(1) NOT NULL CHECK ("IS_SUPERUSER" IN (0,1)), "USERNAME" NVARCHAR2(30) NULL UNIQUE, "FIRST_NAME" NVARCHAR2(30) NULL, "LAST_NAME" NVARCHAR2(30) NULL, "EMAIL" NVARCHAR2(75) NULL, "IS_STAFF" NUMBER(1) NOT NULL CHECK ("IS_STAFF" IN (0,1)), "IS_ACTIVE" NUMBER(1) NOT NULL CHECK ("IS_ACTIVE" IN (0,1)), "DATE_JOINED" TIMESTAMP NOT NULL);
CREATE TABLE "AUTH_USER_GROUPS" ("ID" NUMBER(11) NOT NULL PRIMARY KEY, "USER_ID" NUMBER(11) NOT NULL, "GROUP_ID" NUMBER(11) NOT NULL);
CREATE TABLE "AUTH_USER_USER_PERMISSIONS" ("ID" NUMBER(11) NOT NULL PRIMARY KEY, "USER_ID" NUMBER(11) NOT NULL, "PERMISSION_ID" NUMBER(11) NOT NULL);

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(1) INTO i FROM USER_SEQUENCES
        WHERE SEQUENCE_NAME = 'AUTH_PERMISSION_SQ';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "AUTH_PERMISSION_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "AUTH_PERMISSION_TR"
BEFORE INSERT ON "AUTH_PERMISSION"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "AUTH_PERMISSION_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/
ALTER TABLE "AUTH_PERMISSION" ADD CONSTRAINT "AUTH_PERM_CONTENT_T_2F476E4B_F" FOREIGN KEY ("CONTENT_TYPE_ID") REFERENCES "DJANGO_CONTENT_TYPE" ("ID") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "AUTH_PERMISSION" ADD CONSTRAINT "AUTH_PERM_CONTENT_T_01AB375A_U" UNIQUE ("CONTENT_TYPE_ID", "CODENAME");
CREATE INDEX "AUTH_PERMI_CONTENT_TY_2F476E4B" ON "AUTH_PERMISSION" ("CONTENT_TYPE_ID");

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(1) INTO i FROM USER_SEQUENCES
        WHERE SEQUENCE_NAME = 'AUTH_GROUP_SQ';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "AUTH_GROUP_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "AUTH_GROUP_TR"
BEFORE INSERT ON "AUTH_GROUP"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "AUTH_GROUP_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(1) INTO i FROM USER_SEQUENCES
        WHERE SEQUENCE_NAME = 'AUTH_GROUP_PERMISSIONS_SQ';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "AUTH_GROUP_PERMISSIONS_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "AUTH_GROUP_PERMISSIONS_TR"
BEFORE INSERT ON "AUTH_GROUP_PERMISSIONS"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "AUTH_GROUP_PERMISSIONS_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/
ALTER TABLE "AUTH_GROUP_PERMISSIONS" ADD CONSTRAINT "AUTH_GROU_GROUP_ID_B120CBF9_F" FOREIGN KEY ("GROUP_ID") REFERENCES "AUTH_GROUP" ("ID") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "AUTH_GROUP_PERMISSIONS" ADD CONSTRAINT "AUTH_GROU_PERMISSIO_84C5C92E_F" FOREIGN KEY ("PERMISSION_ID") REFERENCES "AUTH_PERMISSION" ("ID") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "AUTH_GROUP_PERMISSIONS" ADD CONSTRAINT "AUTH_GROU_GROUP_ID__0CD325B0_U" UNIQUE ("GROUP_ID", "PERMISSION_ID");
CREATE INDEX "AUTH_GROUP_GROUP_ID_B120CBF9" ON "AUTH_GROUP_PERMISSIONS" ("GROUP_ID");
CREATE INDEX "AUTH_GROUP_PERMISSION_84C5C92E" ON "AUTH_GROUP_PERMISSIONS" ("PERMISSION_ID");

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(1) INTO i FROM USER_SEQUENCES
        WHERE SEQUENCE_NAME = 'AUTH_USER_SQ';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "AUTH_USER_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "AUTH_USER_TR"
BEFORE INSERT ON "AUTH_USER"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "AUTH_USER_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(1) INTO i FROM USER_SEQUENCES
        WHERE SEQUENCE_NAME = 'AUTH_USER_GROUPS_SQ';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "AUTH_USER_GROUPS_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "AUTH_USER_GROUPS_TR"
BEFORE INSERT ON "AUTH_USER_GROUPS"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "AUTH_USER_GROUPS_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/
ALTER TABLE "AUTH_USER_GROUPS" ADD CONSTRAINT "AUTH_USER_USER_ID_6A12ED8B_F" FOREIGN KEY ("USER_ID") REFERENCES "AUTH_USER" ("ID") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "AUTH_USER_GROUPS" ADD CONSTRAINT "AUTH_USER_GROUP_ID_97559544_F" FOREIGN KEY ("GROUP_ID") REFERENCES "AUTH_GROUP" ("ID") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "AUTH_USER_GROUPS" ADD CONSTRAINT "AUTH_USER_USER_ID_G_94350C0C_U" UNIQUE ("USER_ID", "GROUP_ID");
CREATE INDEX "AUTH_USER__USER_ID_6A12ED8B" ON "AUTH_USER_GROUPS" ("USER_ID");
CREATE INDEX "AUTH_USER__GROUP_ID_97559544" ON "AUTH_USER_GROUPS" ("GROUP_ID");

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(1) INTO i FROM USER_SEQUENCES
        WHERE SEQUENCE_NAME = 'AUTH_USER_USER_PERMISSI7B1E';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "AUTH_USER_USER_PERMISSI7B1E"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "AUTH_USER_USER_PERMISSI17F3"
BEFORE INSERT ON "AUTH_USER_USER_PERMISSIONS"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "AUTH_USER_USER_PERMISSI7B1E".nextval
        INTO :new."ID" FROM dual;
    END;
/
ALTER TABLE "AUTH_USER_USER_PERMISSIONS" ADD CONSTRAINT "AUTH_USER_USER_ID_A95EAD1B_F" FOREIGN KEY ("USER_ID") REFERENCES "AUTH_USER" ("ID") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "AUTH_USER_USER_PERMISSIONS" ADD CONSTRAINT "AUTH_USER_PERMISSIO_1FBB5F2C_F" FOREIGN KEY ("PERMISSION_ID") REFERENCES "AUTH_PERMISSION" ("ID") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "AUTH_USER_USER_PERMISSIONS" ADD CONSTRAINT "AUTH_USER_USER_ID_P_14A6B632_U" UNIQUE ("USER_ID", "PERMISSION_ID");
CREATE INDEX "AUTH_USER__USER_ID_A95EAD1B" ON "AUTH_USER_USER_PERMISSIONS" ("USER_ID");
CREATE INDEX "AUTH_USER__PERMISSION_1FBB5F2C" ON "AUTH_USER_USER_PERMISSIONS" ("PERMISSION_ID");
COMMIT;


--
-- Create model Order
--
CREATE TABLE "TVPACKAGES_ORDER" ("ID" NUMBER(11) NOT NULL PRIMARY KEY, "IS_DELETED" NUMBER(1) NOT NULL CHECK ("IS_DELETED" IN (0,1)));
--
-- Create model Tvchannel
--
CREATE TABLE "TVPACKAGES_TVCHANNEL" ("ID" NUMBER(11) NOT NULL PRIMARY KEY, "CHANNEL_NAME" NVARCHAR2(30) NULL UNIQUE, "CHANNEL_LANGUAGE" NVARCHAR2(30) NULL, "TIME_OF_BROADCASTING" NVARCHAR2(30) NULL, "DESCRIPTION" NVARCHAR2(100) NULL);
--
-- Create model Tvpackage
--
CREATE TABLE "TVPACKAGES_TVPACKAGE" ("ID" NUMBER(11) NOT NULL PRIMARY KEY, "PACKAGE_PRICE" NUMBER(11) NOT NULL CHECK ("PACKAGE_PRICE" >= 0), "PACKAGE_NAME" NVARCHAR2(30) NULL UNIQUE, "DESCRIPTION" NVARCHAR2(100) NULL);
CREATE TABLE "TVPACKAGES_TVPACKAGE_CHANNEL" ("ID" NUMBER(11) NOT NULL PRIMARY KEY, "TVPACKAGE_ID" NUMBER(11) NOT NULL, "TVCHANNEL_ID" NUMBER(11) NOT NULL);
--
-- Add field tv_package to order
--
ALTER TABLE "TVPACKAGES_ORDER" ADD "TV_PACKAGE_ID" NUMBER(11) NOT NULL;
--
-- Add field user to order
--
ALTER TABLE "TVPACKAGES_ORDER" ADD "USER_ID" NUMBER(11) NOT NULL;

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(1) INTO i FROM USER_SEQUENCES
        WHERE SEQUENCE_NAME = 'TVPACKAGES_ORDER_SQ';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "TVPACKAGES_ORDER_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "TVPACKAGES_ORDER_TR"
BEFORE INSERT ON "TVPACKAGES_ORDER"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "TVPACKAGES_ORDER_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(1) INTO i FROM USER_SEQUENCES
        WHERE SEQUENCE_NAME = 'TVPACKAGES_TVCHANNEL_SQ';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "TVPACKAGES_TVCHANNEL_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "TVPACKAGES_TVCHANNEL_TR"
BEFORE INSERT ON "TVPACKAGES_TVCHANNEL"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "TVPACKAGES_TVCHANNEL_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(1) INTO i FROM USER_SEQUENCES
        WHERE SEQUENCE_NAME = 'TVPACKAGES_TVPACKAGE_SQ';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "TVPACKAGES_TVPACKAGE_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "TVPACKAGES_TVPACKAGE_TR"
BEFORE INSERT ON "TVPACKAGES_TVPACKAGE"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "TVPACKAGES_TVPACKAGE_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(1) INTO i FROM USER_SEQUENCES
        WHERE SEQUENCE_NAME = 'TVPACKAGES_TVPACKAGE_CHAB02';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "TVPACKAGES_TVPACKAGE_CHAB02"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "TVPACKAGES_TVPACKAGE_CHA7E3"
BEFORE INSERT ON "TVPACKAGES_TVPACKAGE_CHANNEL"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "TVPACKAGES_TVPACKAGE_CHAB02".nextval
        INTO :new."ID" FROM dual;
    END;
/
ALTER TABLE "TVPACKAGES_TVPACKAGE_CHANNEL" ADD CONSTRAINT "TVPACKAGE_TVPACKAGE_36F2728C_F" FOREIGN KEY ("TVPACKAGE_ID") REFERENCES "TVPACKAGES_TVPACKAGE" ("ID") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "TVPACKAGES_TVPACKAGE_CHANNEL" ADD CONSTRAINT "TVPACKAGE_TVCHANNEL_C90D863C_F" FOREIGN KEY ("TVCHANNEL_ID") REFERENCES "TVPACKAGES_TVCHANNEL" ("ID") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "TVPACKAGES_TVPACKAGE_CHANNEL" ADD CONSTRAINT "TVPACKAGE_TVPACKAGE_AED3BCDF_U" UNIQUE ("TVPACKAGE_ID", "TVCHANNEL_ID");
CREATE INDEX "TVPACKAGES_TVPACKAGE__36F2728C" ON "TVPACKAGES_TVPACKAGE_CHANNEL" ("TVPACKAGE_ID");
CREATE INDEX "TVPACKAGES_TVCHANNEL__C90D863C" ON "TVPACKAGES_TVPACKAGE_CHANNEL" ("TVCHANNEL_ID");
CREATE INDEX "TVPACKAGES_TV_PACKAGE_4FFBAA61" ON "TVPACKAGES_ORDER" ("TV_PACKAGE_ID");
ALTER TABLE "TVPACKAGES_ORDER" ADD CONSTRAINT "TVPACKAGE_TV_PACKAG_4FFBAA61_F" FOREIGN KEY ("TV_PACKAGE_ID") REFERENCES "TVPACKAGES_TVPACKAGE" ("ID") DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "TVPACKAGES_USER_ID_5C03838B" ON "TVPACKAGES_ORDER" ("USER_ID");
ALTER TABLE "TVPACKAGES_ORDER" ADD CONSTRAINT "TVPACKAGE_USER_ID_5C03838B_F" FOREIGN KEY ("USER_ID") REFERENCES "AUTH_USER" ("ID") DEFERRABLE INITIALLY DEFERRED;
COMMIT;


--
-- Create model LogEntry
--
CREATE TABLE "DJANGO_ADMIN_LOG" ("ID" NUMBER(11) NOT NULL PRIMARY KEY, "ACTION_TIME" TIMESTAMP NOT NULL, "OBJECT_ID" NCLOB NULL, "OBJECT_REPR" NVARCHAR2(200) NULL, "ACTION_FLAG" NUMBER(11) NOT NULL CHECK ("ACTION_FLAG" >= 0), "CHANGE_MESSAGE" NCLOB NULL, "CONTENT_TYPE_ID" NUMBER(11) NULL, "USER_ID" NUMBER(11) NOT NULL);

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(1) INTO i FROM USER_SEQUENCES
        WHERE SEQUENCE_NAME = 'DJANGO_ADMIN_LOG_SQ';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "DJANGO_ADMIN_LOG_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "DJANGO_ADMIN_LOG_TR"
BEFORE INSERT ON "DJANGO_ADMIN_LOG"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "DJANGO_ADMIN_LOG_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/
ALTER TABLE "DJANGO_ADMIN_LOG" ADD CONSTRAINT "DJANGO_AD_CONTENT_T_C4BCE8EB_F" FOREIGN KEY ("CONTENT_TYPE_ID") REFERENCES "DJANGO_CONTENT_TYPE" ("ID") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "DJANGO_ADMIN_LOG" ADD CONSTRAINT "DJANGO_AD_USER_ID_C564EBA6_F" FOREIGN KEY ("USER_ID") REFERENCES "AUTH_USER" ("ID") DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "DJANGO_ADM_CONTENT_TY_C4BCE8EB" ON "DJANGO_ADMIN_LOG" ("CONTENT_TYPE_ID");
CREATE INDEX "DJANGO_ADM_USER_ID_C564EBA6" ON "DJANGO_ADMIN_LOG" ("USER_ID");
COMMIT;


CREATE or REPLACE TRIGGER tv_package_price
AFTER INSERT ON TVPACKAGES_ORDER
FOR EACH ROW
    BEGIN
        UPDATE TVPACKAGES_TVPACKAGE
        SET PACKAGE_PRICE = PACKAGE_PRICE + 0.01;
    END;
/
COMMIT;

CREATE OR REPLACE FORCE VIEW "UserChannel" AS 
  SELECT 
    "AUTH_USER"."ID" "USER_ID",
    "AUTH_USER"."USERNAME" "USERNAME",
    "TVPACKAGES_TVCHANNEL"."CHANNEL_NAME" "CHANNEL_NAME", 
    "TVPACKAGES_TVCHANNEL"."CHANNEL_LANGUAGE" "CHANNEL_LANGUAGE", 
    "TVPACKAGES_TVCHANNEL"."TIME_OF_BROADCASTING" "CHANNEL_TIME_OF_BROADCASTING", 
    "TVPACKAGES_TVCHANNEL"."DESCRIPTION" "CHANNEL_DESCRIPTION"
    
  FROM 
    "TVPACKAGES_TVCHANNEL" LEFT JOIN "TVPACKAGES_TVPACKAGE_CHANNEL" ON "TVPACKAGES_TVCHANNEL"."ID" = "TVPACKAGES_TVPACKAGE_CHANNEL"."TVCHANNEL_ID"
    LEFT JOIN "TVPACKAGES_TVPACKAGE" ON "TVPACKAGES_TVPACKAGE_CHANNEL"."TVPACKAGE_ID" = "TVPACKAGES_TVPACKAGE"."ID"
    LEFT JOIN "TVPACKAGES_ORDER" ON "TVPACKAGES_TVPACKAGE"."ID" = "TVPACKAGES_ORDER"."TV_PACKAGE_ID"
    LEFT JOIN "AUTH_USER" ON "TVPACKAGES_ORDER"."USER_ID" = "AUTH_USER"."ID"
    AND "TVPACKAGES_ORDER"."IS_DELETED" = 0;
COMMIT;

create or replace PACKAGE price_change IS
    PROCEDURE test_procedure(TV_PACKAGE_ID INTEGER);
END price_change;


CREATE OR REPLACE PACKAGE BODY price_change IS 
PROCEDURE test_procedure(TV_PACKAGE_ID INTEGER) IS
    BEGIN
        UPDATE "TVPACKAGES_TVPACKAGE"
        SET "PACKAGE_PRICE" = "PACKAGE_PRICE" - 1
        WHERE "ID" = TV_PACKAGE_ID;
    END;   
END price_change;


execute price_change.test_procedure(1);


--
-- Change Meta options on contenttype
--
--
-- Alter field name on contenttype
--
--
-- MIGRATION NOW PERFORMS OPERATION THAT CANNOT BE WRITTEN AS SQL:
-- Raw Python operation
--
--
-- Remove field name from contenttype
--
ALTER TABLE "DJANGO_CONTENT_TYPE" DROP COLUMN "NAME";
COMMIT;


--
-- Alter field name on permission
--
ALTER TABLE "AUTH_PERMISSION" MODIFY "NAME" NVARCHAR2(255);
COMMIT;


--
-- Alter field email on user
--
ALTER TABLE "AUTH_USER" MODIFY "EMAIL" NVARCHAR2(254);
COMMIT;


--
-- Alter field last_login on user
--
ALTER TABLE "AUTH_USER" MODIFY "LAST_LOGIN" NULL;
COMMIT;


--
-- Alter field username on user
--
ALTER TABLE "AUTH_USER" MODIFY "USERNAME" NVARCHAR2(150);
COMMIT;


--
-- Create model Session
--
CREATE TABLE "DJANGO_SESSION" ("SESSION_KEY" NVARCHAR2(40) NOT NULL PRIMARY KEY, "SESSION_DATA" NCLOB NULL, "EXPIRE_DATE" TIMESTAMP NOT NULL);
CREATE INDEX "DJANGO_SES_EXPIRE_DAT_A5C62663" ON "DJANGO_SESSION" ("EXPIRE_DATE");
COMMIT;

